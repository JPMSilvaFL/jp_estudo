// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using agenda_api.Data;

#nullable disable

namespace agenda_api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250427215518_TabblesAndRelations")]
    partial class TabblesAndRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("agenda_api.Models.Atendimento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdCliente");

                    b.Property<Guid>("IdFuncionario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdFuncionario");

                    b.Property<Guid>("IdHorario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdHorario");

                    b.Property<Guid>("IdSecretaria")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdSecretaria");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("IdCliente")
                        .IsUnique();

                    b.HasIndex("IdFuncionario");

                    b.HasIndex("IdHorario")
                        .IsUnique();

                    b.HasIndex("IdSecretaria")
                        .IsUnique();

                    b.ToTable("Atendimento", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Cargo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Nome");

                    b.Property<double>("Salario")
                        .HasColumnType("money")
                        .HasColumnName("Salario");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Cargo", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Cliente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPerson");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Cliente", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Funcionario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("CargoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CargoId");

                    b.Property<DateTime>("DataDeIngresso")
                        .HasColumnType("datetime")
                        .HasColumnName("DataDeIngresso");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("CargoId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Funcionario", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.HorarioDisponivel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid?>("FuncionarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Horario")
                        .HasColumnType("DateTime")
                        .HasColumnName("Horario");

                    b.Property<Guid>("IdFuncionario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdFuncionario");

                    b.Property<bool>("Reservado")
                        .HasColumnType("bit")
                        .HasColumnName("Reservado");

                    b.HasKey("Id");

                    b.HasIndex("FuncionarioId");

                    b.HasIndex("IdFuncionario");

                    b.ToTable("HorarioDisponivel", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.LogAtividade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Categoria")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Categoria");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Descricao");

                    b.Property<Guid>("IdPessoa")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdPessoa");

                    b.HasKey("Id");

                    b.HasIndex("IdPessoa");

                    b.ToTable("LogAtividades", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.PerfilAcesso", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Nome");

                    b.HasKey("Id");

                    b.ToTable("PerfilAcesso", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Contato")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar")
                        .HasColumnName("Contato");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("varchar")
                        .HasColumnName("Cpf");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Email");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Endereco");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("NomeCompleto");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("IsActive");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Pessoa", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Secretaria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("IdFuncionario")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdFuncionario");

                    b.Property<Guid?>("IdSala")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IdSala");

                    b.HasKey("Id");

                    b.HasIndex("IdFuncionario")
                        .IsUnique();

                    b.ToTable("Secretaria", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("UniqueIdentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar")
                        .HasColumnName("Password");

                    b.Property<Guid>("PerfilAcessoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PerfilAcessoId");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PessoaId");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("PerfilAcessoId");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Usuario", (string)null);
                });

            modelBuilder.Entity("agenda_api.Models.Atendimento", b =>
                {
                    b.HasOne("agenda_api.Models.Funcionario", null)
                        .WithMany("Atendimentos")
                        .HasForeignKey("FuncionarioId");

                    b.HasOne("agenda_api.Models.Cliente", "Cliente")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Atendimento", "IdCliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Atendimento_Cliente");

                    b.HasOne("agenda_api.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("IdFuncionario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Atendimento_Funcionario");

                    b.HasOne("agenda_api.Models.HorarioDisponivel", "HorarioDisponivel")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Atendimento", "IdHorario")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Atendimento_Horario");

                    b.HasOne("agenda_api.Models.Secretaria", "Secretaria")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Atendimento", "IdSecretaria")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_Atendimento_Secretaria");

                    b.Navigation("Cliente");

                    b.Navigation("Funcionario");

                    b.Navigation("HorarioDisponivel");

                    b.Navigation("Secretaria");
                });

            modelBuilder.Entity("agenda_api.Models.Cliente", b =>
                {
                    b.HasOne("agenda_api.Models.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Cliente", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cliente_Pessoa");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("agenda_api.Models.Funcionario", b =>
                {
                    b.HasOne("agenda_api.Models.Cargo", "Cargo")
                        .WithMany()
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("agenda_api.Models.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Funcionario", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Funcionario_Pessoa");

                    b.Navigation("Cargo");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("agenda_api.Models.HorarioDisponivel", b =>
                {
                    b.HasOne("agenda_api.Models.Funcionario", null)
                        .WithMany("HorariosDisponiveis")
                        .HasForeignKey("FuncionarioId");

                    b.HasOne("agenda_api.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("IdFuncionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_HorarioDisponivel_Funcionario");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("agenda_api.Models.LogAtividade", b =>
                {
                    b.HasOne("agenda_api.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("agenda_api.Models.Secretaria", b =>
                {
                    b.HasOne("agenda_api.Models.Funcionario", "Funcionario")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Secretaria", "IdFuncionario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Secretaria_Funcionario");

                    b.Navigation("Funcionario");
                });

            modelBuilder.Entity("agenda_api.Models.Usuario", b =>
                {
                    b.HasOne("agenda_api.Models.PerfilAcesso", "Acesso")
                        .WithMany()
                        .HasForeignKey("PerfilAcessoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("agenda_api.Models.Pessoa", "Pessoa")
                        .WithOne()
                        .HasForeignKey("agenda_api.Models.Usuario", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acesso");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("agenda_api.Models.Funcionario", b =>
                {
                    b.Navigation("Atendimentos");

                    b.Navigation("HorariosDisponiveis");
                });
#pragma warning restore 612, 618
        }
    }
}
